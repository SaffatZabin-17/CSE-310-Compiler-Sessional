Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme f found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 1: Token <COMMA> Lexeme , found
Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 1: Token <COMMA> Lexeme , found
Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme c found
parameter_list : parameter_list COMMA type_specifier ID
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <ID> Lexeme a found
Line# 2: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 2: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 2: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 3: Token <ID> Lexeme b found
Line# 3: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 3: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 3: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 4: Token <RETURN> Lexeme return found
Line# 4: Token <ID> Lexeme a found
Line# 4: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 4: Token <ID> Lexeme b found
Line# 4: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 5: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	1--> <c, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	3--> <f, FUNCTION, INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : unit
Line# 7: Token <INT> Lexeme int found
type_specifier : INT
Line# 7: Token <ID> Lexeme main found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <LCURL> Lexeme { found
Line# 8: Token <INT> Lexeme int found
type_specifier : INT
Line# 8: Token <ID> Lexeme i found
Line# 8: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 9: Token <ID> Lexeme i found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 9: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 13: Token <RETURN> Lexeme return found
Line# 13: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 13: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 14: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	7--> <i, ID> 
	ScopeTable# 1
	3--> <f, FUNCTION, INT> 
	4--> <main, FUNCTION, INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
start : program
Total Lines : 15
Total Errors : 0
